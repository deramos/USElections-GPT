version: '3.8'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.4
  env_file:
    - .env
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - ./airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  networks:
    - app-network
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    command: [ "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "9000" , "--workers", "2", "--reload"]
    networks:
      - app-network
    volumes:
      - ./:/app
      - api_data:/var/api-data
    depends_on:
      - scrapyd
      - redis
      # - kafka
      - vectordb
      - mongo
    env_file:
      - .env

  scrapyd:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "6800:6800"
    command: >
      sh -c "scrapyd & logparser"
    networks:
      - app-network

  scrapyd-web:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      scrapyd:
        condition: service_started
    ports:
      - "5000:5000"
    command: >
      sh -c "scrapyd-deploy & scrapydweb"
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8501:8501"
    command: >
      sh -c "streamlit run frontend/view.py"
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis_data:/var/cache
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  redis-insight:
    image: redislabs/redisinsight:latest
    restart: always
    networks:
      - app-network
    ports:
      - "8001:8001"
    volumes:
      - redis-insight:/data

#  kafka:
#    image: docker.io/bitnami/kafka:3.7
#    restart: always
#    ports:
#      - "9092:9092"
#    networks:
#      - app-network
#    volumes:
#      - kafka_data:/var/kafka
#    env_file:
#      - .env

  vectordb:
    image: chromadb/chroma:0.4.25.dev93
    restart: always
    ports:
      - "8000:8000"
    networks:
      - app-network
    volumes:
      - vectordb:/var/chromadb

  mongo:
    image: mongo:7.0.7
    restart: always
    ports:
      - "27017:27017"
    networks:
      - app-network
    env_file:
      - .env
    volumes:
      - mongodb_data:/var/mongodb

  mongo-express:
    image: mongo-express
    restart: always
    networks:
      - app-network
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_started
    env_file:
      - .env

  # -------------------- Airflow Services -------------------- #

#  postgres:
#    image: postgres:13
#    env_file:
#      - .env
#    networks:
#      - app-network
#    volumes:
#      - postgres-db-volume:/var/lib/postgresql/data
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-U", "airflow" ]
#      interval: 5s
#      retries: 5
#    restart: always
#
#  airflow-webserver:
#    <<: *airflow-common
#    command: webserver
#    ports:
#      - "8080:8080"
#    healthcheck:
#      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#
#  airflow-scheduler:
#    <<: *airflow-common
#    command: scheduler
#    healthcheck:
#      test: [ "CMD", "curl", "--fail", "http://localhost:8974/health" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#
#  airflow-worker:
#    <<: *airflow-common
#    command: celery worker
#    healthcheck:
#      # yamllint disable rule:line-length
#      test:
#        - "CMD-SHELL"
#        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    env_file:
#      - .env
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#
#  airflow-triggerer:
#    <<: *airflow-common
#    command: triggerer
#    healthcheck:
#      test: [ "CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"' ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully
#
#  airflow-init:
#    <<: *airflow-common
#    entrypoint: /bin/bash
#    # yamllint disable rule:line-length
#    command:
#      - -c
#      - |
#        if [[ -z "${AIRFLOW_UID}" ]]; then
#          echo
#          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
#          echo "If you are on Linux, you SHOULD follow the instructions below to set "
#          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
#          echo "For other operating systems you can get rid of the warning with manually created .env file:"
#          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
#          echo
#        fi
#        one_meg=1048576
#        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
#        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
#        disk_available=$$(df / | tail -1 | awk '{print $$4}')
#        warning_resources="false"
#        if (( mem_available < 4000 )) ; then
#          echo
#          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
#          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
#          echo
#          warning_resources="true"
#        fi
#        if (( cpus_available < 2 )); then
#          echo
#          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
#          echo "At least 2 CPUs recommended. You have $${cpus_available}"
#          echo
#          warning_resources="true"
#        fi
#        if (( disk_available < one_meg * 10 )); then
#          echo
#          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
#          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
#          echo
#          warning_resources="true"
#        fi
#        if [[ $${warning_resources} == "true" ]]; then
#          echo
#          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
#          echo "Please follow the instructions to increase amount of resources available:"
#          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
#          echo
#        fi
#        mkdir -p /sources/logs /sources/dags /sources/plugins
#        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
#        exec /entrypoint airflow version
#    # yamllint enable rule:line-length
#    env_file:
#      - .env
#    user: "0:0"
#    volumes:
#      - ${AIRFLOW_PROJ_DIR:-./airflow}:/sources
#
#  airflow-cli:
#    <<: *airflow-common
#    profiles:
#      - debug
#    env_file:
#      - .env
#    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
#    command:
#      - bash
#      - -c
#      - airflow
#
#  flower:
#    <<: *airflow-common
#    command: celery flower
#    profiles:
#      - flower
#    ports:
#      - "5555:5555"
#    healthcheck:
#      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#      start_period: 30s
#    restart: always
#    depends_on:
#      <<: *airflow-common-depends-on
#      airflow-init:
#        condition: service_completed_successfully

# -------------------- Airflow Services -------------------- #

networks:
  app-network:
    driver:  bridge

volumes:
  api_data:
  redis_data:
  # redis-insight:
  kafka_data:
  vectordb:
  mongodb_data:
  postgres-db-volume:
