version: '3.8'

x-airflow-common:
  &airflow-common
  image: apache/airflow:2.8.4
  env_file:
    - .env
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - $./airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    command: [ "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "9000" , "--workers", "2", "--reload"]
    networks:
      - app-network
    volumes:
      - ./:/app
      - api_data:/var/api-data
    depends_on:
      - scrapyd
      - redis
      - kafka
      - vectordb
      - mongo
    env_file:
      - .env

  scrapyd:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "6800:6800"
    command: [ "scrapyd"]
    networks:
      - app-network

  scrapyd-web:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      scrapyd:
        condition: service_started
    ports:
      - "5000:5000"
    command: >
      sh -c "scrapyd-deploy & scrapydweb"
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis_data:/var/cache
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  kafka:
    image: docker.io/bitnami/kafka:3.7
    restart: always
    ports:
      - "9092:9092"
    networks:
      - app-network
    volumes:
      - kafka_data:/var/kafka
    env_file:
      - .env

  vectordb:
    image: chromadb/chroma:0.4.25.dev93
    restart: always
    ports:
      - "8000:8000"
    networks:
      - app-network
    volumes:
      - vectordb:/var/chromadb

  mongo:
    image: mongo:7.0.7
    restart: always
    ports:
      - "27017:27017"
    networks:
      - app-network
    env_file:
      - .env
    volumes:
      - mongodb_data:/var/mongodb

  mongo-express:
    image: mongo-express
    restart: always
    networks:
      - app-network
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_started
    env_file:
      - .env

  # --------------- Airflow Services ---------------- #

  postgres:
    image: postgres:13
    env_file:
      - .env
    networks:
      - app-network
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 80:8080

    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always

  airflow-init:
    <<: *airflow-common
    command: version
    env_file:
      - .env

  flower:
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555/" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always


networks:
  app-network:
    driver:  bridge

volumes:
  api_data:
  redis_data:
  kafka_data:
  vectordb:
  mongodb_data:
  postgres-db-volume:
