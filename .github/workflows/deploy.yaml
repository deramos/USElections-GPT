name: Build, Push, and Deploy to Fargate

on:
  pull_request:
    branches:
      - prodv1

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install AWS CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli jq

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Retrieve Secrets from AWS Secrets Manager
        id: get-secrets
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          secrets=$(aws secretsmanager get-secret-value --region $AWS_REGION --secret-id us-election-gpt-secrets | jq -r '.SecretString')
          echo "$secrets" > secrets.json

          jq -r 'to_entries|map("echo \(.key)=\(.value|tostring) >> $GITHUB_ENV")|.[]' secrets.json | bash

      - name: Build and push images
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

          docker-compose --env-file .env -f docker-compose.prod.yml build

          for service in $(docker-compose config --services); do
            IMAGE_NAME="$ECR_REGISTRY/$ECR_REPOSITORY"

            docker tag "$service:latest" "$IMAGE_NAME:$service"
            docker push "$IMAGE_NAME:$TAG"
