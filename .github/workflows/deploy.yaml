name: Build, Push, and Deploy to Fargate

on:
  pull_request:
    branches:
      - prodv1

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install AWS CLI and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli jq

      - name: Log in to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(aws sts get-caller-identity --query Account --output text).dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Retrieve Secrets from AWS Secrets Manager
        id: get-secrets
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SECRET_NAME: ${{ secrets.SECRET_NAME }}
        run: |
          secret_string=$(aws secretsmanager get-secret-value --region $AWS_REGION --secret-id $SECRET_NAME --query SecretString --output text)
          echo $secret_string | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > .env

      - name: Build and push images
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          ECR_REGISTRY="$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"

          docker compose --env-file .env -f docker-compose.prod.yml build

          for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep "uselections"); do
            image_name=$(echo $image | cut -d ':' -f 1)
            image_tag=$(echo $image | cut -d ':' -f 2)
          
            # Construct the new ECR tag
            ecr_tag="$ECR_REGISTRY/$ECR_REPOSITORY:$image_name"
          
            # Tag the image
            echo "Tagging image $image as $ecr_tag"
            docker tag $image $ecr_tag
            
            # Push the image to ECR
            echo "Pushing image $ecr_tag to ECR"
            # docker push $ecr_tag
            docker push $ecr_tag
          
            # remove image after push to accommodate other images
            docker rmi $ecr_tag
            docker rmi $image
          done